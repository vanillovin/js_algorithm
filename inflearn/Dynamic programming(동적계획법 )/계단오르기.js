/**
 * 동적계획법이란 ?
 * 큰 문제가 있다 가정했을 때 이 문제를 한 번에 풀기 어려워서
 * 문제를 "직관적으로" 알 수 있는 아주 작은 단위로 쪼개서 생각하는 것
 * 답이 나오면 기록해놓고 문제의 범위(데이터의 범위)를 약간씩 넓혀가면서
 * 이 넓힌 범위의 답은 엎에 구한 답을 이용해서 구하는 것 (점화식)
 * ex) 등차수열처럼 dy[n] = dy[n-1]+3 => "점화식의 관계"가 있음
 * 관계식을 잡아내는. 점화식을 만들어 내는 것이 다이나믹의 핵심
 * *많이 풀어봐야 익힐 수 있음*
 *
 * 20계단을 다 오르는 경우를 우리 머리로 세보는 것은 매우 힘듦.
 * => 7번째 계단이 도착점일 때, 1(n) 번째 계단이 도착점이라 가정하고
 * 여기서 가는 방법이 몇 가지인지 보는 것!
 *
 * dy라는 배열(dinamic table)을 꼭 만들기
 * dy[1] = 출발 지점에서 첫 번째 계단까지 가는 방법의 수 = 1
 * dy[2] = 출발 지점에서 두 번째 계단까지 가는 방법의 수 = 2
 * dy[3] = 1번 계단에서 왔거나(dy[1]) 2번 계단에서 오는 경우(dy[2]) => 3
 * 앞에 두 개를 더한 것 ... dy[7]이 답
 * 원리를 아는 것이 중요함
 */

function solution(n) {
  let answer = 0;

  let dy = Array.from({ length: n + 1 }, () => 0);
  dy[1] = 1;
  dy[2] = 2;

  for (let i = 3; i <= n; i++) {
    dy[i] = dy[i - 2] + dy[i - 1];
  }

  answer = dy[n];

  return answer;
}

console.log(solution(7)); // 21
